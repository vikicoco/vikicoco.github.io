(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{551:function(t,o,r){"use strict";r.r(o);var a=r(16),e=Object(a.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"springmvc常用注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc常用注解"}},[t._v("#")]),t._v(" SpringMVC常用注解")]),t._v(" "),r("h3",{attrs:{id:"springbootapplication"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[t._v("#")]),t._v(" @SpringBootApplication")]),t._v(" "),r("p",[t._v("组合注解")]),t._v(" "),r("blockquote",[r("p",[t._v("@SpringBootConfiguration : 代表这个类就是一个配置类 , 本质上就是"),r("code",[t._v("@Configuration")]),t._v("注解")]),t._v(" "),r("p",[t._v("@ComponentScan : 组件扫描, 默认扫描启动类所在包及子包下的类身上的注解")]),t._v(" "),r("p",[t._v("@EnableAutoConfiguration : 自动配置注解 , 添加了此注解会自动去读取"),r("code",[t._v("spring.factories")]),t._v("配置文件中的自动配置类")])]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("标识这是一个SpringBoot应用，用来开启SpringBoot的各项功能")])]),t._v(" "),r("h3",{attrs:{id:"enableautoconfiguration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration"}},[t._v("#")]),t._v(" @EnableAutoConfiguration")]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("允许SpringBoot自动配置注解，开启这个注解之后，SpringBoot就能根据当前类路径下的包或者类来配置Spring Bean。")])]),t._v(" "),r("h3",{attrs:{id:"configuration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" @Configuration")]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("用于定义配置类，指出该类是 Bean 配置的信息源")])]),t._v(" "),r("h3",{attrs:{id:"componentscan"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[t._v("#")]),t._v(" @ComponentScan")]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("组件扫描。让springBoot扫描到Configuration类并把它加入到程序上下文。")])]),t._v(" "),r("h3",{attrs:{id:"component"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[t._v("#")]),t._v(" @Component")]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("泛指组件，")])]),t._v(" "),r("h3",{attrs:{id:"repository"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[t._v("#")]),t._v(" @Repository")]),t._v(" "),r("h3",{attrs:{id:"controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[t._v("#")]),t._v(" @Controller")]),t._v(" "),r("h3",{attrs:{id:"service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[t._v("#")]),t._v(" @Service")]),t._v(" "),r("blockquote",[r("p",[t._v("分别表示Dao，Cotroller，Service层的标注")])]),t._v(" "),r("h3",{attrs:{id:"restcontroller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller"}},[t._v("#")]),t._v(" @RestController")]),t._v(" "),r("p",[t._v("组合注解")]),t._v(" "),r("blockquote",[r("p",[t._v("@ResponseBody")]),t._v(" "),r("p",[t._v("@Controller")])]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器")])]),t._v(" "),r("h3",{attrs:{id:"responsebody"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#responsebody"}},[t._v("#")]),t._v(" @ResponseBody")]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("表示该方法的返回结果直接写入HTTP response body中")])]),t._v(" "),r("h3",{attrs:{id:"configurationproperties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#configurationproperties"}},[t._v("#")]),t._v(" @ConfigurationProperties")]),t._v(" "),r("p",[t._v("用途")]),t._v(" "),r("blockquote",[r("p",[t._v("将一些配置属性(如yml/properties中的属性)"),r("strong",[t._v("批量")]),t._v("注入到bean对象。")])])])}),[],!1,null,null,null);o.default=e.exports}}]);