(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{525:function(s,a,t){"use strict";t.r(a);var n=t(16),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"lambda表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式"}},[s._v("#")]),s._v(" Lambda表达式")]),s._v(" "),t("blockquote",[t("p",[s._v("Lambda表达式是一种新的语法糖，让Java开始支持“函数式编程”的语法。")]),s._v(" "),t("p",[s._v("Java是面向对象的编程语言，所有的操作几乎都是基于对象，“一切皆对象”。")]),s._v(" "),t("p",[s._v("如果某个变量或形参是引用数据类型，那么必须给他赋值一个对象再使用。")]),s._v(" "),t("p",[s._v("在开发中，有时候我们并不关心这个对象，我们关心的是这个对象的某个方法的功能，方法体代码，其实就是函数的实现。按照面向对象的编程思想，为了传递这段代码，还要new一个对象，就显得有点啰嗦。")])]),s._v(" "),t("p",[t("strong",[s._v("函数式编程思想：把函数当成数据传递")])]),s._v(" "),t("h3",{attrs:{id:"函数式接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式接口"}},[s._v("#")]),s._v(" 函数式接口")]),s._v(" "),t("blockquote",[t("p",[s._v("函数式接口，是SAM接口（Single Abstract Method）有唯一的抽象方法的接口。")]),s._v(" "),t("p",[t("strong",[s._v("JDK8后可以有default方法，不影响，仍是函数式接口")])])]),s._v(" "),t("p",[t("strong",[s._v("Lambda表达式只针对“函数式接口”使用。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@FunctionalInterface")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只有一个抽象方法，并且标识FuncationalInterface")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//run线程体，do sth")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"......"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"常见函数式接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见函数式接口"}},[s._v("#")]),s._v(" 常见函数式接口")]),s._v(" "),t("p",[t("RouterLink",{attrs:{to:"/pages/fc50b7/"}},[s._v("常见函数式接口")])],1),s._v(" "),t("h3",{attrs:{id:"lambda语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lambda语法"}},[s._v("#")]),s._v(" lambda语法")]),s._v(" "),t("p",[t("strong",[s._v("语法结构：")])]),s._v(" "),t("blockquote",[t("p",[s._v("(Lambda表达式的形参列表)-> {Lambda体}\n(参数类型 参数名称)->{代码语句}")])]),s._v(" "),t("p",[t("strong",[s._v("说明：")])]),s._v(" "),t("blockquote",[t("p",[s._v("1.->：称为箭头操作符，或Lambda操作符,由减号和大于号组成，中间不能有空格，表示指向动作\n2.(Lambda表达式的形参列表)，就是函数式接口的抽象方法的形参列表")])]),s._v(" "),t("p",[t("strong",[s._v("例如：")])]),s._v(" "),t("blockquote",[t("p",[s._v("对于"),t("code",[s._v("Rannable")]),s._v("接口中的run()方法，则Lambda表达式的形参列表为 ()->{}\t\t\n对于"),t("code",[s._v("Comparator<T>")]),s._v("接口中的compare(T t1, T t2)方法，则Lambda表达式的形参列表为 (T t1, T t2)->{}")])]),s._v(" "),t("p",[t("strong",[s._v("作用：")])]),s._v(" "),t("blockquote",[t("p",[s._v("Lambda表达式的作用是给函数式接口的变量/形参赋值的")])]),s._v(" "),t("p",[t("strong",[s._v("Lambda表达式的简化")])]),s._v(" "),t("blockquote",[t("p",[s._v("（1）当{Lambda体}只有一个语句，可以省略{}和语句后面的; ps:如果此时是return语句，要把return也省略\n（2）当（Lambda表达式的形参列表）的形参列表的形参类型是已知的，或者是可以根据泛型自动推断的，那么类型可以省略\n（3）如果（Lambda表达式的形参列表）的形参列表的类型省略了，并且形参只有一个，那么()可以省略")]),s._v(" "),t("p",[s._v("​\t\t如果形参列表是多个参数，()不能省略")]),s._v(" "),t("p",[s._v("​\t\t如果形参列表是空参()，那么()不能省略")])]),s._v(" "),t("p",[t("strong",[s._v("lambda的简化例子")])]),s._v(" "),t("div",{staticClass:"language-Java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Runnable接口中run()方法无参的，()不能省略，只有一条语句，；和 {} 和 return可以省略")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("ps：为什么Thread可以使用lambda表达式？")]),s._v(" "),t("blockquote",[t("p",[s._v("在Thread的构造函数中，public Thread(Runnable target)传入的Runnable接口是函数式接口(JDK1.8)")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用lambda标准格式")]),s._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Comsumer函数式接口中void accept(T t)方法中参数只有一个，()可以是省略，只有一条语句，；和 {} 和 return可以省略")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Comsumer接口是消费型接口，抽象方法是`void accept(T t); 参数类型是t")]),s._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对lambda再次简化，使用方法引用::遍历,下文讲述")]),s._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("ps：为什么forEach方法可以使用lambda表达式？")]),s._v(" "),t("blockquote",[t("p",[s._v("同理，在"),t("code",[s._v("public void forEach(Consumer<? super E> action)")]),s._v("方法中，传入的Consumer接口时函数式接口(JDK1.8)")]),s._v(" "),t("p",[t("strong",[s._v("Comsumer接口是消费型接口，抽象方法是"),t("code",[s._v("void accept(T t); 参数类型是t")])])])]),s._v(" "),t("h3",{attrs:{id:"方法引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法引用"}},[s._v("#")]),s._v(" 方法引用")]),s._v(" "),t("p",[t("strong",[s._v("语法格式：")])]),s._v(" "),t("blockquote",[t("p",[s._v("类名/对象名::方法名")])]),s._v(" "),t("p",[t("strong",[s._v("说明：")])]),s._v(" "),t("blockquote",[t("p",[s._v("::双冒号被称为引用运算符")]),s._v(" "),t("p",[s._v("如果lambda函数体中的代码方案已经在某个方法中实现了，就可以直接使用双冒号::来引用该方法替代lambda表达式")])]),s._v(" "),t("p",[t("strong",[s._v("满足条件：")])]),s._v(" "),t("blockquote",[t("p",[s._v("1.{lambda体}中只有一个语句，并且这个语句是调用现有的对象/类的方法来完成。")]),s._v(" "),t("p",[s._v("2.lambda表达式的(形参列表)中的形参，要么作为调用方法的对象，要么作为调用方法的实参，所\n有形参都要用上")]),s._v(" "),t("p",[s._v("3.在整个{lambda体}中，没有使用到除lambda表达式中额外的数据/对象等")])]),s._v(" "),t("p",[t("strong",[s._v("方法引用例子：")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//例如：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareToIgnoreCase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.{lambda体}中只有一个语句 return t1.compareToIgnoreCase(t2);")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2.Lambda表达式的(形参列表)是(t1, t2)，t1是作为调用compareToIgnoreCase方法的对象，t2是作为调用compareToIgnoreCase方法的实参。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3.没有用到额外数据/对象")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//所以可以使用方法引用，因为t1是String对象，compareToIgnoreCase()是String类的方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareToIgnoreCase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//例如：")]),s._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.{lambda体}中只有一个语句 System.out.println(t)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2.Lambda表达式的(形参列表)是(String t) , t作为println方法调用的实参。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3.没有用到额外数据/对象")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//所以可以使用方法引用，因为println()是System.out对象的方法")]),s._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//例如：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//System.out.println("hello")).start();')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//1.{lambda体}中只有一个语句 System.out.println("hello")')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2.Lambda表达式的(形参列表)是()，没有参数可以使用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//3.在整个{lambda体}中，没有使用到额外的数据/对象等 不满足，出现了"hello"')]),s._v("\n           \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//所以不能使用方法引用代替，运行结果完全不同")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只是启动一个线程打印了一个newLine();")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//供给型接口Supplier<T>，抽象方法T get()")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Lambda表达式可以直接给函数式接口的变量赋值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Supplier")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用构造器引用进行简化")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Supplier")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("1.使用lambda表达式的前提条件")]),s._v(" "),t("blockquote",[t("p",[s._v("传入的参数接口必须是函数式接口")])]),s._v(" "),t("p",[s._v("2.简化lambda表达式使用方法引用::的前提条件")]),s._v(" "),t("blockquote",[t("p",[s._v("1.{lambda体}中只有一个语句，并且这个语句是调用现有的对象/类的方法来完成。")]),s._v(" "),t("p",[s._v("2.lambda表达式的(形参列表)中的形参，要么作为调用方法的对象，要么作为调用方法的实参，所\n有形参都要用上")]),s._v(" "),t("p",[s._v("3.在整个{lambda体}中，没有使用到除lambda表达式中额外的数据/对象等")])]),s._v(" "),t("p",[t("strong",[s._v("参考")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_32073131/article/details/108171529",target:"_blank",rel:"noopener noreferrer"}},[s._v("上文理解不了，试试这个"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);